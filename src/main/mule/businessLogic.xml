<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:netsuite="http://www.mulesoft.org/schema/mule/netsuite" xmlns:email="http://www.mulesoft.org/schema/mule/email"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:salesforce="http://www.mulesoft.org/schema/mule/salesforce" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/salesforce http://www.mulesoft.org/schema/mule/salesforce/current/mule-salesforce.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/email http://www.mulesoft.org/schema/mule/email/current/mule-email.xsd
http://www.mulesoft.org/schema/mule/netsuite http://www.mulesoft.org/schema/mule/netsuite/current/mule-netsuite.xsd">
<flow name="businesslogicFlow" doc:id="20625294-79d3-45a3-90bd-9b44970bc67b" >
		<scatter-gather doc:name="Scatter-Gather" doc:id="062ec4ac-b3c3-49f7-94b4-cea2462cf09b" >
			<route >
				<salesforce:query doc:name="Query all opportunities from SFDC" doc:id="d97f8d00-2a6d-40e1-b2e4-34acdb69e47a" config-ref="Salesforce_Sfdc_A_config">
					<salesforce:salesforce-query >SELECT Id, Name, Amount FROM Opportunity</salesforce:salesforce-query>
				</salesforce:query>
			</route>
			<route >
				<ee:transform doc:name="Prepare opportunity search request" doc:id="98c7d4a6-24e3-4952-b638-a22760404b5d" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{} as Object {
	class : "org.mule.module.netsuite.extension.api.OpportunitySearch"
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<netsuite:search key="OPPORTUNITY" pageSize="100" doc:name="Search opportunities" doc:id="8c3e58c3-a032-4613-871b-894bb57f519a" config-ref="NetSuite_Config"/>
			</route>
		</scatter-gather>
		<ee:transform doc:name="Aggregate collections" doc:id="7668acb0-da18-4df8-92a8-0bc58c5ad88b" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/csv separator=","
import mergeWith from dw::core::Objects
var opportunitiesFromSfdc = payload["0"].payload map (opportunity) -> {
	"Name": opportunity.Name,
	"IDInSFDC": opportunity.Id,
	"AmountInSFDC": opportunity.Amount
}
var opportunitiesFromNetsuite = payload["1"].payload map (opportunity) -> {
	"Name": opportunity.title,
	"IDInNetsuite": opportunity.internalId,
	"AmountInNetsuite": opportunity.projectedTotal
}
var mergedOpportunites =  (
                opportunitiesFromSfdc map ((item) -> item mergeWith ((opportunitiesFromNetsuite filter ($.Name == item.Name))[0] 
                    default {IDInNetsuite: "", AmountInNetsuite: ""}
                ))
            ) distinctBy $.Name
            ++ (
                opportunitiesFromNetsuite map ((item) -> item mergeWith ((opportunitiesFromSfdc filter ($.Name == item.Name))[0] 
                    default {IDInSFDC: "", AmountInSFDC: ""}
                ))
            ) distinctBy $.Name
fun sortBySourceExistence (opportunities) = ((opportunities map (opportunity) -> (
        opportunity ++ {
            sortValue:  if ((opportunity.IDInA != "") and (opportunity.IDInB == "")) 1 
                        else if ((opportunity.IDInB != "") and (opportunity.IDInA == "")) 2 
                        else 3
        }
    )
) orderBy $.sortValue ) map $ -"sortValue"
---
sortBySourceExistence(mergedOpportunites)]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<email:send config-ref="Gmail_SMTP" doc:name="Send migration result email"
			doc:id="5896eaa9-dd10-47a2-a6fc-6319b11dbd06" fromAddress="${mail.from}"
			subject="${mail.subject}">
			<email:to-addresses>
				<email:to-address value="${mail.to}" />
			</email:to-addresses>
			<email:body contentType="text/plain">
				<email:content ><![CDATA[${mail.body}]]></email:content>
			</email:body>
			<email:attachments ><![CDATA[#[{'${attachment.name}' : payload}]]]></email:attachments>
		
</email:send>
</flow>
<flow name="mainFlow" doc:id="c9d80d54-ed92-4dc2-872f-629f3c0b678f" >
	<flow-ref doc:name="businesslogicFlow" doc:id="7e1b3d52-2256-4af8-b0c5-b8fbee3d1b66" name="businesslogicFlow"/>
	<error-handler >
		<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="488b507d-e26c-4c56-8759-8bb4f6645d71" type="ANY">
			<flow-ref doc:name="errorHandlingFlow" doc:id="afdaf73c-0137-4d60-84f6-5c41234771a3" name="errorHandlingFlow"/>
		</on-error-propagate>
	</error-handler>
</flow>	
	
</mule>
